/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/Accounts/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Account"][];
                        "application/json": components["schemas"]["Account"][];
                        "text/json": components["schemas"]["Account"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Account"];
                        "application/json": components["schemas"]["Account"];
                        "text/json": components["schemas"]["Account"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Account"];
                    "text/json": components["schemas"]["Account"];
                    "application/*+json": components["schemas"]["Account"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Account"];
                    "text/json": components["schemas"]["Account"];
                    "application/*+json": components["schemas"]["Account"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Account"];
                        "application/json": components["schemas"]["Account"];
                        "text/json": components["schemas"]["Account"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Accounts/{id}/tsp-allocation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["TSPAllocation"];
                    "text/json": components["schemas"]["TSPAllocation"];
                    "application/*+json": components["schemas"]["TSPAllocation"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Accounts/{id}/performance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Accounts/cash-optimization/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Advice/generate/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Advice"];
                        "application/json": components["schemas"]["Advice"];
                        "text/json": components["schemas"]["Advice"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Advice/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    status?: string;
                    includeDismissed?: boolean;
                };
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Advice"][];
                        "application/json": components["schemas"]["Advice"][];
                        "text/json": components["schemas"]["Advice"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Advice/{adviceId}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    adviceId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Advice"];
                        "application/json": components["schemas"]["Advice"];
                        "text/json": components["schemas"]["Advice"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Advice/{adviceId}/dismiss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    adviceId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Advice"];
                        "application/json": components["schemas"]["Advice"];
                        "text/json": components["schemas"]["Advice"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Advice/{adviceId}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    adviceId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Advice/{adviceId}/convert-to-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    adviceId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/AI/analyze-portfolio/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                        "application/json": string;
                        "text/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/AI/task-recommendations/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["CreateTaskRequest"][];
                        "application/json": components["schemas"]["CreateTaskRequest"][];
                        "text/json": components["schemas"]["CreateTaskRequest"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/AI/market-alerts/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Alert"][];
                        "application/json": components["schemas"]["Alert"][];
                        "text/json": components["schemas"]["Alert"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/AI/explain-recommendation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RecommendationRequest"];
                    "text/json": components["schemas"]["RecommendationRequest"];
                    "application/*+json": components["schemas"]["RecommendationRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                        "application/json": string;
                        "text/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/AI/comprehensive-insights/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AIInsightsResponse"];
                        "application/json": components["schemas"]["AIInsightsResponse"];
                        "text/json": components["schemas"]["AIInsightsResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    userId?: number;
                    isActive?: boolean;
                    isRead?: boolean;
                    isDismissed?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Alert"][];
                        "application/json": components["schemas"]["Alert"][];
                        "text/json": components["schemas"]["Alert"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Alert"];
                    "text/json": components["schemas"]["Alert"];
                    "application/*+json": components["schemas"]["Alert"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Alert"];
                        "application/json": components["schemas"]["Alert"];
                        "text/json": components["schemas"]["Alert"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Alerts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Alert"];
                        "application/json": components["schemas"]["Alert"];
                        "text/json": components["schemas"]["Alert"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Alert"];
                    "text/json": components["schemas"]["Alert"];
                    "application/*+json": components["schemas"]["Alert"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Alert"];
                        "application/json": components["schemas"]["Alert"];
                        "text/json": components["schemas"]["Alert"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Alerts/{id}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Alerts/{id}/dismiss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Alerts/{id}/undismiss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Alerts/ai/generate-market-alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: {
                    userId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Alert"][];
                        "application/json": components["schemas"]["Alert"][];
                        "text/json": components["schemas"]["Alert"][];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Alerts/ai/portfolio-insights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    userId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Alerts/analytics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    userId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Alerts/{alertId}/generate-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    alertId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Alerts/{alertId}/generate-advice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: {
                    includeSnapshot?: boolean;
                };
                header?: never;
                path: {
                    alertId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Advice"];
                        "application/json": components["schemas"]["Advice"];
                        "text/json": components["schemas"]["Advice"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                    "text/json": components["schemas"]["LoginRequest"];
                    "application/*+json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AuthenticationResult"];
                        "application/json": components["schemas"]["AuthenticationResult"];
                        "text/json": components["schemas"]["AuthenticationResult"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RegisterRequest"];
                    "text/json": components["schemas"]["RegisterRequest"];
                    "application/*+json": components["schemas"]["RegisterRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AuthenticationResult"];
                        "application/json": components["schemas"]["AuthenticationResult"];
                        "text/json": components["schemas"]["AuthenticationResult"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/azure-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AzureLoginRequest"];
                    "text/json": components["schemas"]["AzureLoginRequest"];
                    "application/*+json": components["schemas"]["AzureLoginRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AuthenticationResult"];
                        "application/json": components["schemas"]["AuthenticationResult"];
                        "text/json": components["schemas"]["AuthenticationResult"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RefreshTokenRequest"];
                    "text/json": components["schemas"]["RefreshTokenRequest"];
                    "application/*+json": components["schemas"]["RefreshTokenRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AuthenticationResult"];
                        "application/json": components["schemas"]["AuthenticationResult"];
                        "text/json": components["schemas"]["AuthenticationResult"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RefreshTokenRequest"];
                    "text/json": components["schemas"]["RefreshTokenRequest"];
                    "application/*+json": components["schemas"]["RefreshTokenRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserInfo"];
                        "application/json": components["schemas"]["UserInfo"];
                        "text/json": components["schemas"]["UserInfo"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/link-azure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["LinkAzureRequest"];
                    "text/json": components["schemas"]["LinkAzureRequest"];
                    "application/*+json": components["schemas"]["LinkAzureRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AuthConfig"];
                        "application/json": components["schemas"]["AuthConfig"];
                        "text/json": components["schemas"]["AuthConfig"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/docs/endpoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": unknown[];
                        "application/json": unknown[];
                        "text/json": unknown[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Goals/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": unknown[];
                        "application/json": unknown[];
                        "text/json": unknown[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Goals/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Goal"];
                        "application/json": components["schemas"]["Goal"];
                        "text/json": components["schemas"]["Goal"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Goal"];
                    "text/json": components["schemas"]["Goal"];
                    "application/*+json": components["schemas"]["Goal"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Goals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Goal"];
                    "text/json": components["schemas"]["Goal"];
                    "application/*+json": components["schemas"]["Goal"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Goal"];
                        "application/json": components["schemas"]["Goal"];
                        "text/json": components["schemas"]["Goal"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Goals/{id}/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": number;
                    "text/json": number;
                    "application/*+json": number;
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Goals/emergency-fund/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/IncomeSources/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": unknown[];
                        "application/json": unknown[];
                        "text/json": unknown[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/IncomeSources/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["IncomeSource"];
                        "application/json": components["schemas"]["IncomeSource"];
                        "text/json": components["schemas"]["IncomeSource"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["IncomeSource"];
                    "text/json": components["schemas"]["IncomeSource"];
                    "application/*+json": components["schemas"]["IncomeSource"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/IncomeSources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["IncomeSource"];
                    "text/json": components["schemas"]["IncomeSource"];
                    "application/*+json": components["schemas"]["IncomeSource"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["IncomeSource"];
                        "application/json": components["schemas"]["IncomeSource"];
                        "text/json": components["schemas"]["IncomeSource"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/IncomeSources/va-disability/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/IncomeSources/summary/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Market/price/{symbol}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    symbol: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["MarketPrice"];
                        "application/json": components["schemas"]["MarketPrice"];
                        "text/json": components["schemas"]["MarketPrice"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Market/prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    symbols?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": {
                            [key: string]: components["schemas"]["MarketPrice"];
                        };
                        "application/json": {
                            [key: string]: components["schemas"]["MarketPrice"];
                        };
                        "text/json": {
                            [key: string]: components["schemas"]["MarketPrice"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Market/indices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["MarketIndices"];
                        "application/json": components["schemas"]["MarketIndices"];
                        "text/json": components["schemas"]["MarketIndices"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Market/tsp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": {
                            [key: string]: components["schemas"]["MarketPrice"];
                        };
                        "application/json": {
                            [key: string]: components["schemas"]["MarketPrice"];
                        };
                        "text/json": {
                            [key: string]: components["schemas"]["MarketPrice"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Market/economic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["EconomicIndicators"];
                        "application/json": components["schemas"]["EconomicIndicators"];
                        "text/json": components["schemas"]["EconomicIndicators"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Market/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["MarketOverview"];
                        "application/json": components["schemas"]["MarketOverview"];
                        "text/json": components["schemas"]["MarketOverview"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Market/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ServiceHealth"];
                        "application/json": components["schemas"]["ServiceHealth"];
                        "text/json": components["schemas"]["ServiceHealth"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Portfolio/{userId}/valuation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PortfolioValuation"];
                        "application/json": components["schemas"]["PortfolioValuation"];
                        "text/json": components["schemas"]["PortfolioValuation"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Portfolio/{userId}/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AccountValuation"][];
                        "application/json": components["schemas"]["AccountValuation"][];
                        "text/json": components["schemas"]["AccountValuation"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Portfolio/{userId}/update-prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Portfolio/{userId}/performance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PortfolioPerformance"];
                        "application/json": components["schemas"]["PortfolioPerformance"];
                        "text/json": components["schemas"]["PortfolioPerformance"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Portfolio/{userId}/net-worth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NetWorthSummary"];
                        "application/json": components["schemas"]["NetWorthSummary"];
                        "text/json": components["schemas"]["NetWorthSummary"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Portfolio/{userId}/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PortfolioDashboard"];
                        "application/json": components["schemas"]["PortfolioDashboard"];
                        "text/json": components["schemas"]["PortfolioDashboard"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Profile/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UpdateProfileRequest"];
                    "text/json": components["schemas"]["UpdateProfileRequest"];
                    "application/*+json": components["schemas"]["UpdateProfileRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Profile/setup/progress/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Profile/setup/complete-step/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CompleteStepRequest"];
                    "text/json": components["schemas"]["CompleteStepRequest"];
                    "application/*+json": components["schemas"]["CompleteStepRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Profile/setup/reset/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    userId?: number;
                    status?: components["schemas"]["TaskStatus"];
                    type?: components["schemas"]["TaskType"];
                    priority?: components["schemas"]["TaskPriority"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserTask"][];
                        "application/json": components["schemas"]["UserTask"][];
                        "text/json": components["schemas"]["UserTask"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateTaskRequest"];
                    "text/json": components["schemas"]["CreateTaskRequest"];
                    "application/*+json": components["schemas"]["CreateTaskRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserTask"];
                        "application/json": components["schemas"]["UserTask"];
                        "text/json": components["schemas"]["UserTask"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserTask"];
                        "application/json": components["schemas"]["UserTask"];
                        "text/json": components["schemas"]["UserTask"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["UserTask"];
                    "text/json": components["schemas"]["UserTask"];
                    "application/*+json": components["schemas"]["UserTask"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserTask"];
                        "application/json": components["schemas"]["UserTask"];
                        "text/json": components["schemas"]["UserTask"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Tasks/{id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CompleteTaskRequest"];
                    "text/json": components["schemas"]["CompleteTaskRequest"];
                    "application/*+json": components["schemas"]["CompleteTaskRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserTask"];
                        "application/json": components["schemas"]["UserTask"];
                        "text/json": components["schemas"]["UserTask"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Tasks/{id}/dismiss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": string;
                    "text/json": string;
                    "application/*+json": string;
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserTask"];
                        "application/json": components["schemas"]["UserTask"];
                        "text/json": components["schemas"]["UserTask"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Tasks/{id}/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": number;
                    "text/json": number;
                    "application/*+json": number;
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserTask"];
                        "application/json": components["schemas"]["UserTask"];
                        "text/json": components["schemas"]["UserTask"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Tasks/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["TaskStatus"];
                    "text/json": components["schemas"]["TaskStatus"];
                    "application/*+json": components["schemas"]["TaskStatus"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserTask"];
                        "application/json": components["schemas"]["UserTask"];
                        "text/json": components["schemas"]["UserTask"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Tasks/analytics/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Tasks/ai/recommendations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    userId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["CreateTaskRequest"][];
                        "application/json": components["schemas"]["CreateTaskRequest"][];
                        "text/json": components["schemas"]["CreateTaskRequest"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Tasks/ai/priority": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateTaskRequest"];
                    "text/json": components["schemas"]["CreateTaskRequest"];
                    "application/*+json": components["schemas"]["CreateTaskRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TaskPriority"];
                        "application/json": components["schemas"]["TaskPriority"];
                        "text/json": components["schemas"]["TaskPriority"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Tasks/ai/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CreateTaskRequest"];
                    "text/json": components["schemas"]["CreateTaskRequest"];
                    "application/*+json": components["schemas"]["CreateTaskRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TaskType"];
                        "application/json": components["schemas"]["TaskType"];
                        "text/json": components["schemas"]["TaskType"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Tasks/ai/portfolio-analysis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    userId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                        "application/json": string;
                        "text/json": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Tasks/ai/market-alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    userId?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Alert"][];
                        "application/json": components["schemas"]["Alert"][];
                        "text/json": components["schemas"]["Alert"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["User"][];
                        "application/json": components["schemas"]["User"][];
                        "text/json": components["schemas"]["User"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["User"];
                    "text/json": components["schemas"]["User"];
                    "application/*+json": components["schemas"]["User"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["User"];
                        "application/json": components["schemas"]["User"];
                        "text/json": components["schemas"]["User"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["User"];
                        "application/json": components["schemas"]["User"];
                        "text/json": components["schemas"]["User"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["User"];
                    "text/json": components["schemas"]["User"];
                    "application/*+json": components["schemas"]["User"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users/{id}/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/WeatherForecast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetWeatherForecast"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AIInsightsResponse: {
            /** Format: int32 */
            userId?: number;
            portfolioAnalysis?: string | null;
            taskRecommendations?: components["schemas"]["CreateTaskRequest"][] | null;
            marketAlerts?: components["schemas"]["Alert"][] | null;
            /** Format: date-time */
            generatedAt?: string;
        };
        APICredential: {
            /** Format: int32 */
            apiCredentialId?: number;
            /** Format: int32 */
            accountId: number;
            providerName: string;
            encryptedApiKey: string;
            encryptedApiSecret?: string | null;
            refreshToken?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            lastUsed?: string | null;
            /** Format: date-time */
            expiresAt?: string | null;
            isActive?: boolean;
            account?: components["schemas"]["Account"];
        };
        Account: {
            /** Format: int32 */
            accountId?: number;
            /** Format: int32 */
            userId: number;
            accountName: string;
            accountType: components["schemas"]["AccountType"];
            category: components["schemas"]["AccountCategory"];
            institution?: string | null;
            accountNumber?: string | null;
            /** Format: double */
            currentBalance: number;
            /** Format: double */
            interestRate?: number | null;
            /** Format: date-time */
            interestRateUpdatedAt?: string | null;
            hasAPIIntegration?: boolean;
            apiProvider?: string | null;
            isAPIConnected?: boolean;
            /** Format: date-time */
            lastAPISync?: string | null;
            apiConnectionStatus?: string | null;
            /** Format: double */
            tspMonthlyContribution?: number | null;
            /** Format: double */
            tspEmployerMatch?: number | null;
            tspAllocation?: components["schemas"]["TSPAllocation"];
            isEmergencyFund?: boolean;
            /** Format: double */
            optimalInterestRate?: number | null;
            /** Format: date-time */
            rateLastChecked?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            lastBalanceUpdate?: string | null;
            isActive?: boolean;
            notes?: string | null;
            holdings?: components["schemas"]["Holding"][] | null;
            transactions?: components["schemas"]["Transaction"][] | null;
            apiCredentials?: components["schemas"]["APICredential"];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        AccountCategory: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
        /**
         * Format: int32
         * @enum {integer}
         */
        AccountType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14;
        AccountValuation: {
            /** Format: int32 */
            accountId?: number;
            accountName?: string | null;
            accountType?: components["schemas"]["AccountType"];
            institution?: string | null;
            /** Format: double */
            cashBalance?: number;
            /** Format: double */
            holdingsValue?: number;
            /** Format: double */
            totalValue?: number;
            /** Format: date-time */
            valuationDate?: string;
            holdings?: components["schemas"]["HoldingValuation"][] | null;
        };
        Advice: {
            /** Format: int32 */
            adviceId?: number;
            /** Format: int32 */
            userId: number;
            theme?: string | null;
            status: string;
            consensusText: string;
            /** Format: int32 */
            confidenceScore?: number;
            primaryJson?: string | null;
            validatorJson?: string | null;
            violationsJson?: string | null;
            /** Format: int32 */
            linkedTaskId?: number | null;
            /** Format: date-time */
            acceptedAt?: string | null;
            /** Format: date-time */
            dismissedAt?: string | null;
            previousStatus?: string | null;
            /** Format: int32 */
            sourceAlertId?: number | null;
            generationMethod?: string | null;
            sourceAlertSnapshot?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            user?: components["schemas"]["User"];
        };
        Alert: {
            /** Format: int32 */
            alertId?: number;
            /** Format: int32 */
            userId: number;
            title: string;
            message: string;
            severity?: components["schemas"]["AlertSeverity"];
            category?: components["schemas"]["AlertCategory"];
            isRead?: boolean;
            isDismissed?: boolean;
            isActionable?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            readAt?: string | null;
            /** Format: date-time */
            dismissedAt?: string | null;
            /** Format: date-time */
            expiresAt?: string | null;
            actionUrl?: string | null;
            metadata?: string | null;
            /** Format: int32 */
            portfolioImpactScore?: number;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        AlertCategory: 1 | 2 | 3 | 4 | 5 | 6 | 7;
        /**
         * Format: int32
         * @enum {integer}
         */
        AlertSeverity: 1 | 2 | 3 | 4;
        /**
         * Format: int32
         * @enum {integer}
         */
        AssetType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27;
        AuthConfig: {
            bypassAuthentication?: boolean;
            azureEnabled?: boolean;
            localAuthEnabled?: boolean;
            registrationEnabled?: boolean;
        };
        AuthenticationResult: {
            isSuccess?: boolean;
            token?: string | null;
            user?: components["schemas"]["UserInfo"];
            errorMessage?: string | null;
            /** Format: date-time */
            expiresAt?: string;
        };
        AzureLoginRequest: {
            azureToken: string;
        };
        CompleteStepRequest: {
            stepName: string;
        };
        CompleteTaskRequest: {
            completionNotes?: string | null;
        };
        CreateTaskRequest: {
            /** Format: int32 */
            userId: number;
            type: components["schemas"]["TaskType"];
            title: string;
            description: string;
            priority?: components["schemas"]["TaskPriority"];
            /** Format: date-time */
            dueDate?: string | null;
            /** Format: int32 */
            sourceAlertId?: number | null;
            /** Format: double */
            estimatedImpact?: number | null;
            impactDescription?: string | null;
            /** Format: double */
            confidenceScore?: number | null;
        };
        EconomicIndicators: {
            /** Format: double */
            treasuryYield10Year?: number;
            /** Format: double */
            treasuryYield2Year?: number;
            /** Format: double */
            dollarIndex?: number;
            /** Format: double */
            crudeOilPrice?: number;
            /** Format: double */
            goldPrice?: number;
            /** Format: double */
            bitcoinPrice?: number;
            fedFundsRate?: string | null;
            /** Format: date-time */
            lastUpdated?: string;
        };
        Goal: {
            /** Format: int32 */
            goalId?: number;
            /** Format: int32 */
            userId: number;
            name: string;
            description?: string | null;
            type: components["schemas"]["GoalType"];
            category: components["schemas"]["GoalCategory"];
            /** Format: double */
            targetAmount: number;
            /** Format: double */
            currentAmount?: number;
            /** Format: double */
            readonly remainingAmount?: number;
            /** Format: double */
            readonly completionPercentage?: number;
            /** Format: date-time */
            targetDate?: string | null;
            /** Format: double */
            monthlyContribution?: number | null;
            /** Format: double */
            requiredMonthlyContribution?: number | null;
            /** Format: double */
            targetMonthlyIncome?: number | null;
            /** Format: double */
            expectedAnnualReturn?: number | null;
            /** Format: double */
            withdrawalRate?: number | null;
            /** Format: int32 */
            retirementAgeTarget?: number | null;
            /** Format: int32 */
            monthsOfExpenses?: number | null;
            /** Format: double */
            monthlyExpenses?: number | null;
            /** Format: int32 */
            riskTolerance?: number;
            strategy?: components["schemas"]["GoalStrategy"];
            /** Format: int32 */
            priority?: number;
            status?: components["schemas"]["GoalStatus"];
            milestones?: components["schemas"]["GoalMilestone"][] | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            completedAt?: string | null;
            notes?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        GoalCategory: 0 | 1 | 2 | 3;
        GoalMilestone: {
            /** Format: int32 */
            milestoneId?: number;
            /** Format: int32 */
            goalId: number;
            title: string;
            description?: string | null;
            /** Format: double */
            targetAmount: number;
            /** Format: double */
            currentAmount?: number;
            /** Format: date-time */
            targetDate: string;
            status?: components["schemas"]["MilestoneStatus"];
            /** Format: int32 */
            sortOrder?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            completedAt?: string | null;
            goal?: components["schemas"]["Goal"];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        GoalStatus: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
        /**
         * Format: int32
         * @enum {integer}
         */
        GoalStrategy: 0 | 1 | 2 | 3 | 4;
        /**
         * Format: int32
         * @enum {integer}
         */
        GoalType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
        Holding: {
            /** Format: int32 */
            holdingId?: number;
            /** Format: int32 */
            accountId: number;
            symbol: string;
            name?: string | null;
            assetType: components["schemas"]["AssetType"];
            /** Format: double */
            quantity: number;
            /** Format: double */
            averageCostBasis: number;
            /** Format: double */
            currentPrice?: number;
            /** Format: double */
            readonly currentValue?: number;
            /** Format: double */
            readonly totalCostBasis?: number;
            /** Format: double */
            readonly unrealizedGainLoss?: number;
            /** Format: double */
            readonly unrealizedGainLossPercentage?: number;
            /** Format: double */
            annualDividendYield?: number | null;
            /** Format: double */
            stakingAPY?: number | null;
            /** Format: double */
            annualDividendIncome?: number | null;
            /** Format: date-time */
            lastDividendDate?: string | null;
            /** Format: date-time */
            nextDividendDate?: string | null;
            /** Format: double */
            beta?: number | null;
            sectorAllocation?: string | null;
            geographicAllocation?: string | null;
            isQualifiedDividend?: boolean;
            /** Format: date-time */
            purchaseDate?: string | null;
            isLongTermCapitalGains?: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            lastPriceUpdate?: string | null;
            notes?: string | null;
            account?: components["schemas"]["Account"];
            transactions?: components["schemas"]["Transaction"][] | null;
        };
        HoldingValuation: {
            symbol?: string | null;
            /** Format: double */
            quantity?: number;
            /** Format: double */
            currentPrice?: number;
            /** Format: double */
            currentValue?: number;
            /** Format: double */
            purchasePrice?: number;
            /** Format: double */
            purchaseValue?: number;
            /** Format: double */
            unrealizedGainLoss?: number;
            /** Format: double */
            gainLossPercentage?: number;
            /** Format: date-time */
            lastPriceUpdate?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        IncomeFrequency: 0 | 1 | 2 | 3 | 4 | 5 | 6;
        /**
         * Format: int32
         * @enum {integer}
         */
        IncomeReliability: 0 | 1 | 2 | 3 | 4 | 5 | 6;
        IncomeSource: {
            /** Format: int32 */
            incomeSourceId?: number;
            /** Format: int32 */
            userId: number;
            name: string;
            type: components["schemas"]["IncomeType"];
            frequency: components["schemas"]["IncomeFrequency"];
            /** Format: double */
            amount: number;
            /** Format: double */
            readonly monthlyAmount?: number;
            /** Format: double */
            readonly annualAmount?: number;
            reliability?: components["schemas"]["IncomeReliability"];
            isGuaranteed?: boolean;
            isActive?: boolean;
            isTaxable?: boolean;
            isW2Income?: boolean;
            is1099Income?: boolean;
            /** Format: int32 */
            vaDisabilityPercentage?: number | null;
            isVACombined?: boolean;
            governmentAgency?: string | null;
            gS_PayScale?: string | null;
            symbol?: string | null;
            /** Format: double */
            dividendYield?: number | null;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string | null;
            /** Format: date-time */
            nextPaymentDate?: string | null;
            /** Format: double */
            annualGrowthRate?: number | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            notes?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        IncomeType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21;
        Insurance: {
            /** Format: int32 */
            insuranceId?: number;
            /** Format: int32 */
            userId: number;
            policyName: string;
            type: components["schemas"]["InsuranceType"];
            insuranceCompany: string;
            policyNumber?: string | null;
            /** Format: double */
            coverageAmount: number;
            /** Format: double */
            deductible?: number | null;
            /** Format: double */
            outOfPocketMax?: number | null;
            /** Format: double */
            premiumAmount: number;
            premiumFrequency: components["schemas"]["PremiumFrequency"];
            /** Format: double */
            readonly monthlyPremium?: number;
            /** Format: double */
            readonly annualPremium?: number;
            /** Format: date-time */
            policyStartDate: string;
            /** Format: date-time */
            policyEndDate?: string | null;
            /** Format: date-time */
            renewalDate: string;
            /** Format: date-time */
            lastPremiumPayment?: string | null;
            /** Format: date-time */
            nextPremiumDue?: string | null;
            /** Format: double */
            cashValue?: number | null;
            /** Format: double */
            cashValueGrowthRate?: number | null;
            isTerm?: boolean;
            /** Format: int32 */
            termLengthYears?: number | null;
            beneficiaries?: string | null;
            vehicleDescription?: string | null;
            vin?: string | null;
            /** Format: double */
            vehicleValue?: number | null;
            propertyAddress?: string | null;
            /** Format: double */
            propertyValue?: number | null;
            /** Format: double */
            replacementCost?: number | null;
            /** Format: double */
            monthlyBenefit?: number | null;
            /** Format: int32 */
            benefitPeriodMonths?: number | null;
            /** Format: int32 */
            waitingPeriodDays?: number | null;
            networkType?: string | null;
            hasHSA?: boolean;
            /** Format: double */
            hsaContributionLimit?: number | null;
            status?: components["schemas"]["InsuranceStatus"];
            needsReview?: boolean;
            /** Format: date-time */
            lastReviewDate?: string | null;
            isAdequateCoverage?: boolean;
            /** Format: double */
            recommendedCoverageAmount?: number | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            notes?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        InsuranceStatus: 0 | 1 | 2 | 3 | 4;
        /**
         * Format: int32
         * @enum {integer}
         */
        InsuranceType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
        LinkAzureRequest: {
            azureObjectId: string;
        };
        LoginRequest: {
            /** Format: email */
            email: string;
            password: string;
        };
        MarketIndices: {
            sP500?: components["schemas"]["MarketPrice"];
            nasdaq?: components["schemas"]["MarketPrice"];
            dowJones?: components["schemas"]["MarketPrice"];
            russell2000?: components["schemas"]["MarketPrice"];
            vix?: components["schemas"]["MarketPrice"];
            /** Format: date-time */
            lastUpdated?: string;
            marketStatus?: string | null;
        };
        MarketOverview: {
            indices?: components["schemas"]["MarketIndices"];
            tspFunds?: {
                [key: string]: components["schemas"]["MarketPrice"];
            } | null;
            economicIndicators?: components["schemas"]["EconomicIndicators"];
            /** Format: date-time */
            lastUpdated?: string;
        };
        MarketPrice: {
            symbol?: string | null;
            /** Format: double */
            price?: number;
            /** Format: double */
            change?: number;
            /** Format: double */
            changePercent?: number;
            /** Format: double */
            volume?: number;
            /** Format: double */
            dayHigh?: number;
            /** Format: double */
            dayLow?: number;
            /** Format: double */
            open?: number;
            /** Format: double */
            previousClose?: number;
            /** Format: date-time */
            lastUpdated?: string;
            exchange?: string | null;
            companyName?: string | null;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        MilestoneStatus: 0 | 1 | 2 | 3 | 4;
        NetWorthSummary: {
            /** Format: int32 */
            userId?: number;
            /** Format: date-time */
            asOfDate?: string;
            /** Format: double */
            investmentAssets?: number;
            /** Format: double */
            cashAssets?: number;
            /** Format: double */
            realEstateAssets?: number;
            /** Format: double */
            cryptocurrencyAssets?: number;
            /** Format: double */
            otherAssets?: number;
            /** Format: double */
            totalAssets?: number;
            /** Format: double */
            totalLiabilities?: number;
            /** Format: double */
            netWorth?: number;
            /** Format: double */
            annualIncome?: number;
        };
        PortfolioDashboard: {
            /** Format: int32 */
            userId?: number;
            /** Format: date-time */
            lastUpdated?: string;
            valuation?: components["schemas"]["PortfolioValuation"];
            accounts?: components["schemas"]["AccountValuation"][] | null;
            performance?: components["schemas"]["PortfolioPerformance"];
            netWorth?: components["schemas"]["NetWorthSummary"];
        };
        PortfolioPerformance: {
            /** Format: int32 */
            userId?: number;
            /** Format: date-time */
            asOfDate?: string;
            /** Format: double */
            currentValue?: number;
            /** Format: double */
            totalInvestedAmount?: number;
            /** Format: double */
            totalGainLoss?: number;
            /** Format: double */
            totalReturnPercentage?: number;
            /** Format: double */
            stockAllocation?: number;
            /** Format: double */
            cashAllocation?: number;
            /** Format: double */
            alternativeAllocation?: number;
        };
        PortfolioValuation: {
            /** Format: int32 */
            userId?: number;
            /** Format: date-time */
            valuationDate?: string;
            /** Format: double */
            totalPortfolioValue?: number;
            /** Format: double */
            investmentValue?: number;
            /** Format: double */
            taxableValue?: number;
            /** Format: double */
            taxDeferredValue?: number;
            /** Format: double */
            taxFreeValue?: number;
            /** Format: double */
            taxAdvantaged?: number;
            /** Format: double */
            cashValue?: number;
            /** Format: double */
            cryptocurrencyValue?: number;
            /** Format: double */
            realEstateValue?: number;
            /** Format: double */
            alternativeValue?: number;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        PremiumFrequency: 0 | 1 | 2 | 3;
        /**
         * Format: int32
         * @enum {integer}
         */
        PropertyStatus: 0 | 1 | 2 | 3 | 4 | 5;
        /**
         * Format: int32
         * @enum {integer}
         */
        PropertyType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
        RealEstate: {
            /** Format: int32 */
            realEstateId?: number;
            /** Format: int32 */
            userId: number;
            propertyName: string;
            address: string;
            propertyType: components["schemas"]["PropertyType"];
            status: components["schemas"]["PropertyStatus"];
            /** Format: double */
            purchasePrice: number;
            /** Format: date-time */
            purchaseDate: string;
            /** Format: double */
            currentMarketValue?: number;
            /** Format: date-time */
            lastAppraisalDate?: string | null;
            /** Format: double */
            mortgageBalance?: number;
            /** Format: double */
            mortgageInterestRate?: number;
            /** Format: date-time */
            mortgageMaturityDate?: string | null;
            /** Format: double */
            monthlyMortgagePayment?: number;
            /** Format: double */
            monthlyRentalIncome?: number;
            /** Format: double */
            monthlyExpenses?: number;
            /** Format: double */
            securityDeposit?: number;
            /** Format: date-time */
            leaseStartDate?: string | null;
            /** Format: date-time */
            leaseEndDate?: string | null;
            /** Format: int32 */
            squareFootage?: number | null;
            /** Format: int32 */
            bedrooms?: number | null;
            /** Format: int32 */
            bathrooms?: number | null;
            /** Format: int32 */
            yearBuilt?: number | null;
            /** Format: double */
            annualPropertyTaxes?: number;
            /** Format: double */
            annualInsurance?: number;
            notes?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: double */
            readonly monthlyNetIncome?: number;
            /** Format: double */
            readonly annualNetIncome?: number;
            /** Format: double */
            readonly netWorthContribution?: number;
        };
        RecommendationRequest: {
            recommendation?: string | null;
        };
        RefreshTokenRequest: {
            refreshToken: string;
        };
        RegisterRequest: {
            email?: string | null;
            password?: string | null;
            firstName?: string | null;
            lastName?: string | null;
        };
        ServiceHealth: {
            isAvailable?: boolean;
            status?: string | null;
            /** Format: date-time */
            lastChecked?: string;
            message?: string | null;
        };
        TSPAllocation: {
            /** Format: double */
            gFundPercentage?: number;
            /** Format: double */
            fFundPercentage?: number;
            /** Format: double */
            cFundPercentage?: number;
            /** Format: double */
            sFundPercentage?: number;
            /** Format: double */
            iFundPercentage?: number;
            /** Format: double */
            lIncomeFundPercentage?: number;
            /** Format: double */
            l2030FundPercentage?: number;
            /** Format: double */
            l2035FundPercentage?: number;
            /** Format: double */
            l2040FundPercentage?: number;
            /** Format: double */
            l2045FundPercentage?: number;
            /** Format: double */
            l2050FundPercentage?: number;
            /** Format: double */
            l2055FundPercentage?: number;
            /** Format: double */
            l2060FundPercentage?: number;
            /** Format: double */
            l2065FundPercentage?: number;
            /** Format: double */
            l2070FundPercentage?: number;
            /** Format: double */
            l2075FundPercentage?: number;
            /** Format: date-time */
            lastUpdated?: string;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        TaskPriority: 1 | 2 | 3 | 4;
        /**
         * Format: int32
         * @enum {integer}
         */
        TaskStatus: 1 | 2 | 3 | 4 | 5;
        /**
         * Format: int32
         * @enum {integer}
         */
        TaskType: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
        Transaction: {
            /** Format: int32 */
            transactionId?: number;
            /** Format: int32 */
            accountId: number;
            /** Format: int32 */
            holdingId?: number | null;
            transactionType: string;
            symbol?: string | null;
            /** Format: double */
            quantity?: number | null;
            /** Format: double */
            price?: number | null;
            /** Format: double */
            amount: number;
            /** Format: double */
            fee?: number | null;
            /** Format: date-time */
            transactionDate: string;
            /** Format: date-time */
            settlementDate: string;
            isTaxable?: boolean;
            isLongTermCapitalGains?: boolean;
            /** Format: double */
            taxableAmount?: number | null;
            /** Format: double */
            costBasis?: number | null;
            /** Format: double */
            capitalGainLoss?: number | null;
            source?: components["schemas"]["TransactionSource"];
            externalTransactionId?: string | null;
            description?: string | null;
            isDividendReinvestment?: boolean;
            isQualifiedDividend?: boolean;
            /** Format: double */
            stakingReward?: number | null;
            /** Format: double */
            stakingAPY?: number | null;
            /** Format: date-time */
            createdAt: string;
            notes?: string | null;
            account?: components["schemas"]["Account"];
            holding?: components["schemas"]["Holding"];
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        TransactionSource: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
        UpdateProfileRequest: {
            firstName?: string | null;
            lastName?: string | null;
            email?: string | null;
            phoneNumber?: string | null;
            /** Format: date-time */
            dateOfBirth?: string | null;
            employmentType?: string | null;
            payGrade?: string | null;
            /** Format: double */
            annualIncome?: number | null;
            retirementSystem?: string | null;
            /** Format: date-time */
            serviceComputationDate?: string | null;
            isGovernmentEmployee?: boolean | null;
            governmentAgency?: string | null;
            /** Format: int32 */
            vaDisabilityPercentage?: number | null;
            /** Format: double */
            vaDisabilityMonthlyAmount?: number | null;
            /** Format: int32 */
            riskTolerance?: number | null;
            /** Format: double */
            emergencyFundTarget?: number | null;
            /** Format: double */
            retirementGoalAmount?: number | null;
            /** Format: double */
            targetMonthlyPassiveIncome?: number | null;
            /** Format: date-time */
            targetRetirementDate?: string | null;
            enableRebalancingAlerts?: boolean | null;
            /** Format: double */
            rebalancingThreshold?: number | null;
            enableTaxOptimization?: boolean | null;
            enablePushNotifications?: boolean | null;
            enableEmailAlerts?: boolean | null;
        };
        User: {
            /** Format: int32 */
            userId?: number;
            firstName: string;
            lastName: string;
            /** Format: email */
            email: string;
            phoneNumber?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: int32 */
            riskTolerance?: number;
            /** Format: date-time */
            lastRiskAssessment?: string | null;
            /** Format: double */
            retirementGoalAmount?: number | null;
            /** Format: double */
            targetMonthlyPassiveIncome?: number | null;
            /** Format: date-time */
            targetRetirementDate?: string | null;
            /** Format: double */
            emergencyFundTarget: number;
            /** Format: double */
            vaDisabilityMonthlyAmount?: number | null;
            /** Format: int32 */
            vaDisabilityPercentage?: number | null;
            isGovernmentEmployee?: boolean;
            governmentAgency?: string | null;
            /** Format: date-time */
            dateOfBirth?: string | null;
            employmentType?: string | null;
            /** Format: date-time */
            serviceComputationDate?: string | null;
            payGrade?: string | null;
            /** Format: double */
            annualIncome?: number | null;
            retirementSystem?: string | null;
            profileSetupComplete?: boolean;
            /** Format: date-time */
            profileCompletedAt?: string | null;
            setupStepsCompleted?: string | null;
            /** Format: int32 */
            setupProgressPercentage?: number;
            passwordHash?: string | null;
            azureObjectId?: string | null;
            isActive?: boolean;
            /** Format: date-time */
            lastLoginAt?: string | null;
            /** Format: int32 */
            failedLoginAttempts?: number;
            /** Format: date-time */
            accountLockedUntil?: string | null;
            isTestAccount?: boolean;
            bypassAuthentication?: boolean;
            enableRebalancingAlerts?: boolean;
            /** Format: double */
            rebalancingThreshold?: number;
            enableTaxOptimization?: boolean;
            enablePushNotifications?: boolean;
            enableEmailAlerts?: boolean;
            accounts?: components["schemas"]["Account"][] | null;
            goals?: components["schemas"]["Goal"][] | null;
            incomeSources?: components["schemas"]["IncomeSource"][] | null;
            insurancePolicies?: components["schemas"]["Insurance"][] | null;
            realEstateProperties?: components["schemas"]["RealEstate"][] | null;
            alerts?: components["schemas"]["Alert"][] | null;
            tasks?: components["schemas"]["UserTask"][] | null;
        };
        UserInfo: {
            /** Format: int32 */
            userId?: number;
            email?: string | null;
            firstName?: string | null;
            lastName?: string | null;
            isSetupComplete?: boolean;
        };
        UserTask: {
            /** Format: int32 */
            taskId?: number;
            /** Format: int32 */
            userId: number;
            type: components["schemas"]["TaskType"];
            title: string;
            description: string;
            priority?: components["schemas"]["TaskPriority"];
            status?: components["schemas"]["TaskStatus"];
            /** Format: date-time */
            createdDate: string;
            /** Format: date-time */
            dueDate?: string | null;
            /** Format: date-time */
            completedDate?: string | null;
            /** Format: date-time */
            dismissedDate?: string | null;
            /** Format: int32 */
            sourceAlertId?: number | null;
            /** Format: int32 */
            sourceAdviceId?: number | null;
            sourceType?: string | null;
            notes?: string | null;
            completionNotes?: string | null;
            /** Format: double */
            estimatedImpact?: number | null;
            impactDescription?: string | null;
            /** Format: int32 */
            progressPercentage?: number;
            /** Format: double */
            confidenceScore?: number | null;
        };
        WeatherForecast: {
            /** Format: date */
            date?: string;
            /** Format: int32 */
            temperatureC?: number;
            /** Format: int32 */
            readonly temperatureF?: number;
            summary?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetWeatherForecast: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["WeatherForecast"][];
                    "application/json": components["schemas"]["WeatherForecast"][];
                    "text/json": components["schemas"]["WeatherForecast"][];
                };
            };
        };
    };
}
