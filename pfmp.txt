# Personal Financial Management Platform (PFMP)

# Personal Financial Management Platform (PFMP)

## Project Description
A comprehensive AI-powered wealth management and retirement planning platform that aggregates all financial accounts, provides intelligent analysis, and creates personalized strategies for achieving financial independence through optimized passive income generation. This system serves as a unified financial command center that tracks your complete financial picture, leverages advanced AI for holistic recommendations, and guides strategic decision-making toward retirement goals.

## Enhanced Goals & Objectives
- **Comprehensive Portfolio Aggregation**: Connect to trading platforms (Binance, TD Ameritrade, E*TRADE, Schwab) via APIs plus manual entry for accounts without API access (TSP, traditional banks)
- **Retirement Planning Focus**: Set dollar amount OR monthly passive income targets with timeline-based milestone tracking and Monte Carlo probability modeling
- **Multi-Asset Tracking**: Stocks, bonds, crypto, real estate, precious metals, collectibles with automated valuation updates
- **Income Source Management**: Track all income streams including employment, VA disability, dividends, rental income, business income
- **Real Estate Integration**: Home value tracking vs. mortgage balance, rental property management, equity calculations
- **AI-Powered Holistic Analysis**: Complete financial picture analysis incorporating news sentiment, modern investment strategies, and risk tolerance
- **Smart Automation**: Scheduled data pulls, rebalancing alerts, tax loss harvesting opportunities, dividend calendars
- **Goal-Oriented Recommendations**: AI suggestions based on available capital, current allocations, risk tolerance, and retirement timeline
- **Advanced Dashboard**: Real-time net worth tracking, interactive charts, performance attribution, custom views
- **Intelligent Alerts**: Push notifications and email alerts for rebalancing opportunities, market events, goal milestones

## Target Use Case
Personal comprehensive wealth management system designed for an individual investor focused on achieving financial independence through optimized passive income strategies. Tracks complete financial picture across all account types and asset classes, providing AI-driven guidance for retirement planning and investment optimization.

## Technology Stack

### Frontend: React with TypeScript
- **Framework**: React 18 with TypeScript
- **Build Tool**: Vite for fast development and building
- **UI Library**: Material-UI or Ant Design for professional components
- **Charting**: TradingView widgets for advanced charts, Chart.js for portfolio charts
- **State Management**: React Query for API state management
- **Real-time**: SignalR client for live market data
- **PWA**: Progressive Web App capabilities for mobile-like experience
- **Deployment**: Azure Static Web Apps

### Backend: .NET 9 Web API
- **Framework**: .NET 9 Web API with C#
- **Database**: Entity Framework Core with PostgreSQL
- **Background Services**: .NET Background Services + Hangfire for scheduling
- **Real-time**: SignalR hubs for push notifications
- **AI Integration**: Azure OpenAI SDK for GPT-4 integration
- **API Integrations**: Yahoo Finance, Alpha Vantage, News APIs
- **Deployment**: Azure App Service (Linux)
- **Upgrade Path**: Migrate to .NET 10 when it reaches stable/LTS status

### Database Strategy
- **Primary**: Azure PostgreSQL Flexible Server for structured financial data (production)
- **Development**: PostgreSQL 15 on Synology NAS via Docker Container
  - **Host**: 192.168.1.108:5433
  - **Database**: pfmp_dev
  - **Container**: pfmp-postgresql (official postgres:15 image)
  - **Volume**: Docker-managed persistent storage
  - **Network**: Local network access via synobridge mode
- **Caching**: Azure Redis Cache for session storage and real-time data
- **Vector Storage**: Azure Cognitive Search or Pinecone for AI memory
- **Backup**: Synology NAS for local backups during development

### AI & Memory Architecture
- **Primary AI**: OpenAI GPT-5 via Azure OpenAI Service (daily summaries, data processing, Azure integration)
- **Secondary AI**: Anthropic Claude 4 Sonnet (complex analysis, risk assessment, validation)
- **AI Strategy**: Hybrid approach leveraging each model's strengths for optimal financial advice
- **Upgrade Rationale**: Latest models provide superior financial reasoning, market analysis, and risk assessment capabilities
- **Memory System**: Vector database for conversation history and preferences
- **Context Loading**: Automatic injection of portfolio state, market conditions, and user preferences
- **Persona**: Persistent financial advisor personality with memory of past conversations
- **Learning**: Track recommendation outcomes and user preferences over time
- **Validation Layer**: Cross-reference critical recommendations between AI providers

## Infrastructure & Hosting

### Development Environment
- **Local Development**: Windows laptop for primary development
- **Database**: PostgreSQL on Synology NAS (192.168.1.108:5433)
- **Container Management**: Synology Container Manager with Docker Compose
- **External Access**: FQDN configured for external testing
- **Version Control**: Git with GitHub repository (https://github.com/WireDoc/pfmp)
- **IDE**: Visual Studio 2022 for .NET development
- **GitHub Integration**: GitHub CLI authenticated, automated workflows ready

### Production Hosting (Azure)
- **API Hosting**: Azure App Service (Linux)
- **Frontend Hosting**: Azure Static Web Apps
- **Database**: Azure PostgreSQL Flexible Server
- **Scheduling**: Azure Functions for daily market updates
- **Monitoring**: Azure Application Insights
- **Security**: Azure Key Vault for secrets management
- **Alerts**: Azure Communication Services for SMS/email notifications

### Hybrid Approach
- **Development**: Windows laptop + PostgreSQL on Synology NAS
- **Staging**: Ubuntu server for integration testing (future)
- **Production**: Azure cloud services
- **Backup**: Maintain local backups on Synology
- **Scaling**: Cloud-first with ability to scale up/out as needed

## Development Phases

### Phase 1: MVP Foundation (2-4 weeks) - 98% COMPLETE
**Backend Development:**
- ‚úÖ Set up .NET 9 Web API project structure (Visual Studio 2022)
- ‚úÖ Implement Entity Framework with PostgreSQL (EF Core 9.0.9 + Npgsql)
- ‚úÖ Create basic ApplicationDbContext and database configuration
- ‚úÖ Configure network accessibility (API on 0.0.0.0:5052)
- ‚úÖ Verify PostgreSQL connectivity to Synology NAS (192.168.1.108:5433)
- ‚úÖ Initialize Git repository and GitHub integration (https://github.com/WireDoc/pfmp)
- Ready for: Entity Framework migrations and financial data models
- Ready for: Deploy to Azure App Service (when ready for cloud deployment)

#### Development Environment Status (CURRENT)
‚úÖ **PostgreSQL 15**: Deployed on Synology NAS (192.168.1.108:5433)
‚úÖ **.NET 9 API**: Configured and network accessible (0.0.0.0:5052)
‚úÖ **Entity Framework**: Installed and configured with Npgsql provider
‚úÖ **Git Repository**: Created and synchronized on GitHub.com (https://github.com/WireDoc/pfmp)
‚è≥ **React Frontend**: Pending - needs Node.js and project setup
‚è≥ **API Models**: Pending - needs financial data entity classes

#### Next Development Steps
1. Install Node.js LTS and create React TypeScript project with Vite
2. Create Entity Framework models for financial data (Portfolio, Transaction, User)
3. Implement database migrations and initial schema
4. Build basic API endpoints for portfolio management
5. Create React dashboard with API integration and Material-UI components

**Frontend Development:**
- Set up React with TypeScript and Vite
- Create basic dashboard with portfolio overview
- Implement basic charting with Chart.js
- Build responsive UI with Material-UI
- Deploy to Azure Static Web Apps

**Database Setup:**
- ‚úÖ PostgreSQL 15 deployed on Synology NAS via Docker Container
- ‚úÖ Database pfmp_dev created with user pfmp_user
- ‚úÖ Container configured with persistent storage and health monitoring
- ‚úÖ Network access verified from development environment (192.168.1.108:5433)
- ‚úÖ Entity Framework connection configured and tested
- Ready for: Entity Framework migrations for financial schema

### Phase 2: Core Portfolio Management & API Integration (3-4 weeks) - 95% COMPLETE
**Entity Framework & Database Design:** ‚úÖ COMPLETE
- ‚úÖ Create comprehensive financial data models (User, Account, Portfolio, Transaction, Goal)
- ‚úÖ Design API integration tracking (ConnectionStatus, SyncHistory, EncryptedCredentials)
- ‚úÖ Implement goal and risk tolerance management models
- ‚úÖ Build income source and cash flow tracking models
- ‚úÖ Create real estate and property tracking models
- ‚úÖ Add database migrations for complete financial schema
- ‚úÖ Applied Entity Framework migrations to PostgreSQL database
- ‚úÖ Verified API-database connectivity and full schema deployment

#### Current Database Schema (12 Tables):
‚úÖ **Users**: Government employee profiles with TSP, VA disability, risk tolerance
‚úÖ **Accounts**: Financial accounts with TSP allocation tracking, interest rate optimization
‚úÖ **Holdings**: Investment positions with crypto staking yield, dividend tracking
‚úÖ **Transactions**: Complete transaction history with tax implications
‚úÖ **Goals**: Financial goals with retirement targets, emergency fund planning
‚úÖ **GoalMilestones**: Milestone tracking for goal progress visualization
‚úÖ **IncomeSources**: Income tracking including guaranteed VA disability income
‚úÖ **InsurancePolicies**: Comprehensive insurance coverage tracking
‚úÖ **RealEstateProperties**: Property management with rental income calculations
‚úÖ **APICredentials**: Secure API credential storage for financial integrations
‚úÖ **Alerts**: User notification system for financial events
üÜï **Tasks**: AI recommendation-to-action task management with completion tracking
‚úÖ **APICredentials**: Secure API credential storage for financial integrations
‚úÖ **Alerts**: User notification system for financial events

**API Development & TSP Integration:** ‚úÖ COMPLETE
- ‚úÖ **API Controllers**: Complete CRUD operations for Users, Accounts, Goals, Income Sources
- ‚úÖ **TSP System**: All 16 TSP funds implemented (5 individual + 11 lifecycle funds)
- ‚úÖ **Manual Data Entry**: Complete forms for TSP, emergency fund, VA disability tracking
- ‚úÖ **Frontend Components**: TSP allocation form with preset strategies and validation
- ‚úÖ **Government Employee Focus**: Specialized interfaces for federal employee needs

#### Complete TSP Fund Coverage (16 Funds):
‚úÖ **Individual Funds**: G Fund, F Fund, C Fund, S Fund, I Fund
‚úÖ **Lifecycle Funds**: L Income, L2030, L2035, L2040, L2045, L2050, L2055, L2060, L2065, L2070, L2075
‚úÖ **Features**: Preset allocation strategies, real-time validation, professional interface

#### Phase 2 Final Status:
‚úÖ **API Controllers**: Complete REST endpoints for all core entities
‚úÖ **Frontend Components**: TSP forms, dashboard structure, Material-UI integration
‚úÖ **Manual Data Entry**: Government employee focused data entry systems
‚è≥ **End-to-End Testing**: Pending Node.js environment fix (computer restart required)

**API Integration Architecture:**
- **Trading Platform APIs**: Binance, Coinbase Pro, TD Ameritrade, E*TRADE, Charles Schwab
- **Secure Credential Management**: Encrypted API key storage with Azure Key Vault
- **Scheduled Data Sync**: Background jobs for real-time balance and transaction updates
- **Error Handling & Retry Logic**: Robust API failure management and reconnection
- **Rate Limiting**: Respect API limits while maintaining data freshness

**Manual Data Entry Systems:**
- TSP (Thrift Savings Plan) balance and contribution tracking interfaces
- **Enhanced Cash Account Management**: Savings, checking, CDs, money market with APR/APY tracking
- **Yield Optimization**: Interest rate monitoring and comparison with market rates for cash accounts
- **Liquidity Analysis**: Emergency fund vs. excess cash classification with yield maximization recommendations
- Real estate property management (value, mortgage, rental income)
- Insurance and other asset manual tracking
- Income source management (VA disability, salary, dividends, rental)

**Cash Management & Yield Optimization:**
- APR/APY tracking for all cash-based accounts (savings, checking, CDs, money market)
- Real-time market rate comparison for identifying better yield opportunities
- Emergency fund liquidity requirements vs. yield optimization balance
- Excess cash identification when balances exceed emergency fund targets
- CD ladder strategy recommendations for maximizing returns on emergency fund portion
- AI-powered cash allocation recommendations based on liquidity needs and available rates

**Basic Portfolio Dashboard:**
- Account aggregation view with real-time balances
- Asset allocation charts and performance metrics
- Goal progress tracking with timeline visualization
- Net worth tracking and historical performance
- Manual data entry interfaces with validation

### Phase 3: AI Integration & Advanced Analysis (3-4 weeks)
**AI Service Layer:**
- Integrate Azure OpenAI Service with comprehensive financial context
- Add Anthropic Claude API for complex portfolio analysis and validation
- Design holistic portfolio analysis system incorporating all account types
- Implement news sentiment analysis integration (NewsAPI, Financial Modeling Prep)
- Create AI recommendation engine for spare capital allocation
- Build risk assessment and rebalancing recommendation system

**News & Market Intelligence:**
- Real-time news feed integration with portfolio relevance filtering
- Market sentiment analysis affecting user's specific holdings
- Economic indicator tracking and impact assessment
- Integration of modern investment strategies from thought leaders
- Automated research compilation for investment opportunities

**Advanced Analytics:**
- Monte Carlo retirement projections incorporating VA disability as guaranteed income
- Q4-focused tax loss harvesting with year-round opportunity monitoring
- Comprehensive insurance coverage analysis and optimization recommendations
- TSP allocation recommendations based on holistic portfolio analysis
- Crypto staking yield tracking and performance vs. traditional dividends
- Emergency fund progress tracking with specific dollar amount targets

**Intelligent Benchmarking & Performance:**
- Market index comparisons (S&P 500, Total Stock Market, bond indices)
- Expert strategy benchmarking (Bogleheads, Ray Dalio All Weather, others)
- Current market conditions adjustment for benchmark recommendations
- Risk-adjusted performance metrics (Sharpe ratio, alpha, beta)
- Personal historical performance tracking and trend analysis

**Smart Alerts & Automation:**
- Drift-triggered rebalancing alerts with user-customizable thresholds (default 5-10%)
- Configurable alert frequency with option to disable specific alert types
- Critical alerts for significant portfolio drift (>10%) or market events
- Q4 tax optimization intensive alerts (September-December)
- Emergency fund progress milestones and target achievement notifications
- Insurance coverage adequacy alerts based on net worth changes
- Portfolio rebalancing alerts when allocations drift
- Tax loss harvesting opportunity notifications
- Dividend payment and ex-dividend date reminders
- Goal milestone achievement notifications
- Market volatility alerts relevant to portfolio holdings
- Set up background job scheduling with Hangfire
- Configure email notifications for daily updates

**AI Recommendation-to-Task System:**
- Convert AI recommendations into actionable tasks with accept/dismiss options
- Task lifecycle management: Pending ‚Üí Accepted ‚Üí In Progress ‚Üí Completed/Dismissed
- Task categorization: Rebalancing, Stock Purchases, Tax Loss Harvesting, Cash Optimization
- Progress tracking with deadline management and priority scoring
- Completion feedback loop to improve AI recommendation quality
- Task history and analytics for decision-making patterns
- Integration with portfolio actions to automatically mark tasks as completed

### Phase 3: Advanced Features (3-4 weeks)
**Task Management Features:**
- TasksController for managing AI-generated recommendations as actionable tasks
- Task table with fields: ID, UserID, Type (Rebalancing/Purchase/TaxLoss/CashOptimization), Title, Description, Priority, Status (Pending/Accepted/InProgress/Completed/Dismissed), CreatedDate, DueDate, CompletedDate, SourceRecommendation (linked to Alert)
- Task dashboard component for viewing and managing all tasks
- Task completion workflow with progress tracking
- Integration with existing Alert system for seamless recommendation-to-task conversion
- Task analytics for measuring implementation success rates

**Real-time Capabilities:**
- Implement SignalR for real-time market updates
- Create live dashboard with streaming data
- Build notification system for price alerts
- Add real-time portfolio performance tracking

**Enhanced Analytics:**
- Advanced portfolio analytics and risk metrics
- Tax-loss harvesting analysis
- Sector allocation and rebalancing recommendations
- Performance attribution and benchmarking

**Mobile Experience:**
- Convert to Progressive Web App (PWA)
- Implement offline capabilities for basic features
- Add push notification support
- Optimize UI for mobile devices

### Phase 4: Scale & Optimize (2-3 weeks)
**Performance Optimization:**
- Implement Redis caching for frequently accessed data
- Optimize database queries and indexes
- Add CDN for static assets
- Implement auto-scaling policies

**Advanced AI Features:**
- Fine-tune AI models based on user interactions
- Implement predictive analytics for market trends
- Add sentiment analysis for news processing
- Create automated trading signal generation (advisory only)
- Cross-validation system using both OpenAI and Claude for critical decisions
- AI recommendation scoring and confidence levels

**Monitoring & Alerting:**
- Comprehensive logging with Application Insights
- Performance monitoring and alerting
- Error tracking and automated notifications
- Cost monitoring and optimization

## Data Sources & APIs

### Market Data
- **Yahoo Finance API**: Primary source for stock prices and basic data
- **Alpha Vantage**: Advanced technical indicators and fundamental data
- **Polygon.io**: Real-time market data (if budget allows)
- **CoinGecko**: Cryptocurrency prices and market data

### News & Analysis
- **NewsAPI**: General financial news aggregation
- **Alpha Vantage News**: Financial news with sentiment analysis
- **Reddit API**: Social sentiment from investment subreddits
- **Twitter/X API**: Market sentiment and trending topics

### Economic Data
- **FRED API**: Federal Reserve economic data
- **Treasury.gov**: Bond yields and rates
- **SEC EDGAR**: Company filings and fundamental data

## Security & Compliance

### Data Protection
- All sensitive data encrypted at rest and in transit
- Azure Key Vault for API keys and connection strings
- Personal financial data remains private and secure
- Regular security audits and updates

### Authentication & Authorization
- Azure AD B2C for user authentication (even for personal use)
- Role-based access control for different features
- Secure API endpoints with JWT tokens
- Multi-factor authentication support

### Privacy
- No third-party data sharing
- Local backup options for data sovereignty
- Clear data retention policies
- GDPR-compliant data handling (even for personal use)

## Success Metrics

### Technical Metrics
- **Uptime**: 99.9% availability target
- **Performance**: API response times under 200ms
- **Accuracy**: Market data freshness within 15 minutes
- **Reliability**: Zero data loss with proper backup strategies

### Functional Metrics
- **AI Quality**: Relevant and actionable daily summaries
- **Memory Effectiveness**: AI remembers preferences and context
- **Portfolio Tracking**: Accurate performance calculations
- **User Experience**: Intuitive and responsive interface

### Business Metrics
- **Cost Efficiency**: Keep monthly Azure costs under $100 initially
- **Scalability**: Handle portfolio growth without performance degradation
- **Feature Adoption**: Regular use of all major features
- **Decision Support**: Improved investment decision making

## Risk Mitigation

### Technical Risks
- **API Limitations**: Multiple data source redundancy
- **AI Costs**: Implement usage monitoring and optimization
- **Scalability**: Cloud-native architecture for easy scaling
- **Data Loss**: Multiple backup strategies and disaster recovery

### Financial Risks
- **Investment Liability**: Clear disclaimers that AI provides information, not advice
- **Market Data Accuracy**: Multiple source verification for critical decisions
- **Cost Overruns**: Monitoring and alerting for cloud resource usage

### Operational Risks
- **Single Point of Failure**: Distributed architecture with redundancy
- **Maintenance Windows**: Blue-green deployment for zero-downtime updates
- **Knowledge Transfer**: Comprehensive documentation and code comments

## Future Enhancements

### Potential Extensions
- **Tax Integration**: Connect to tax software for optimization
- **Brokerage Integration**: Direct API connections to trading platforms
- **Advanced Analytics**: Machine learning for market prediction
- **Multi-User Support**: Architecture ready for family or advisor use
- **Mobile Apps**: Native iOS/Android applications
- **Voice Interface**: Integration with Alexa or Google Assistant

### Monetization Options (Future)
- **SaaS Platform**: Multi-tenant version for other individuals
- **Advisor Tools**: White-label solution for financial advisors
- **API Licensing**: Sell AI-powered financial analysis APIs
- **Premium Features**: Advanced analytics and faster updates

## Getting Started

### Prerequisites
- Azure subscription with credits or budget allocated
- Development environment (Ubuntu server, Synology NAS)
- Domain name configured for external access
- API keys for financial data providers
- Azure OpenAI Service access
- Anthropic Claude API access
- OpenAI API access (fallback/development)

### Initial Setup Steps
1. **Environment Setup**: Configure local development environment
2. **Azure Resources**: Provision initial Azure services
3. **Repository**: Set up Git repository with CI/CD pipeline
4. **API Keys**: Obtain and securely store all required API keys
5. **Database**: Set up PostgreSQL and design initial schema
6. **MVP Development**: Begin Phase 1 development following the plan

This comprehensive plan provides a roadmap for building a sophisticated, AI-powered personal financial management platform that can grow and evolve with changing needs while maintaining professional-grade architecture and security standards.

---

## Current Status (2025-09-23)

**Development Phase**: Phase 3 Task Management - ‚úÖ **FULLY COMPLETE**

### Completed Milestones
- ‚úÖ **Phase 1**: MVP Foundation (PostgreSQL, .NET API, React frontend)
- ‚úÖ **Phase 2**: Core Portfolio Management (11 entities, complete TSP integration)
- ‚úÖ **Phase 3**: Task Management System (CRUD operations, debugging complete)

### Task Management System Status
**All operations tested and working**:
- Create Task: Frontend form ‚Üí API ‚Üí Database ‚úÖ
- Accept Task: Status transitions working ‚úÖ
- Dismiss Task: HTTP method fixes applied ‚úÖ
- Complete Task: DTO implemented, completion notes working ‚úÖ
- View Tasks: JSON serialization circular references resolved ‚úÖ

### Service Management Protocol
‚ö†Ô∏è **Critical**: Service restart required for:
- Controller method signature changes
- New DTO/Model classes
- Entity Framework attribute changes
- API endpoint modifications

### Next Phase Ready
**Phase 4**: AI Integration preparation complete with working task system foundation.

---

## Development Environment Current State
- **API**: .NET 9 on http://localhost:5052 ‚úÖ
- **Frontend**: React 19.1.1 on http://localhost:3000 ‚úÖ
- **Database**: PostgreSQL 15 with 12 tables ‚úÖ
- **Task System**: Complete CRUD functionality ‚úÖ

---

## Rebuild Interlude (Added 2025-09-27)

### Context
Post-migration (MUI Grid v2 + auth refactor) review uncovered that higher-order frontend orchestration layers (routing shell, onboarding wizard, protected layout, intelligence dashboards, alert UI) were absent while backend domains and several advanced leaf components persisted. To avoid ad hoc, undocumented reinstatement, a structured wave-based rebuild plan was adopted and documented before reintroducing code.

### Still Present / Intact
- Backend domain: Users, Accounts, Goals, IncomeSources, Alerts, Tasks, AI scaffolds
- TSP 16-fund allocation logic & form code
- Leaf components: SmartInvestmentRecommendations, RealBankAccountDashboard, ProtectedDashboardSections
- Auth foundation: Custom provider using `@azure/msal-browser` (wrapper removed) with dev bypass
- Build optimization: Manual Rollup chunk splitting & selective lazy loading

### Missing (Deliberately Scheduled for Rebuild)
- ProtectedRoute & routed layout/navigation frame
- Onboarding wizard (`WelcomeOnboardingFlow`) + `UserSetupContext` + progress tracking
- Auth UI: AuthHeader, SignInPrompt, UserProfileCard, AuthDebugPanel
- Market dashboards (live & intelligence panels)
- FinancialIntelligenceCenter aggregation hub
- SmartAlertsSystem frontend layer
- Dual-AI pipeline (advisor + validator abstraction & consensus surface)
- Developer diagnostics / debug panel

### Rebuild Waves
| Wave | Scope | Abbrev. Definition of Done |
|------|-------|----------------------------|
| 0 | Documentation Alignment | README/log/pfmp.txt interlude/wave plan/migration note committed |
| 1 | Routing & Protection | React Router, ProtectedRoute, layout shell, nav skeleton, suspense guards |
| 2 | User Setup Layer | UserSetupContext, multi-step wizard (demographics, risk, TSP, income), persisted progress |
| 3 | Auth & Profile UX | AuthHeader, SignInPrompt, ProfileCard, AuthDebugPanel, DebugComponent |
| 4 | Intelligence Dashboards | Market dashboards, FinancialIntelligenceCenter, SmartAlertsSystem UI |
| 5 | Dual-AI Pipeline | Advisor + Validator abstraction, consensus scoring & policy gates |
| 6 | Performance & A11y | Bundle audit, route-level splitting validation, accessibility pass, test harness expansion |

### Dual-AI Pipeline Vision (Wave 5 Target)
1. Primary model generates structured recommendation set.  
2. Validation model reviews for risk alignment, redundancy, temporal relevance.  
3. Consensus engine merges or flags dissent; attaches confidence & rationale.  
4. Policy gate (configurable) can suppress low-confidence or conflicting outputs.  
Early iterations will mock inference responses to validate UX & telemetry before real API cost exposure.

### Principles
1. Incremental orchestration reintroduction (reduce regression risk).  
2. Mock before real AI expenses.  
3. Explicit acceptance criteria per wave (tracked in dedicated wave plan doc).  
4. Feature flags for experimental dashboards / dual-AI modules.  
5. Performance polishing deferred to Wave 6 except critical regressions.

### Risks & Mitigations
| Risk | Mitigation |
|------|------------|
| Scope creep inside a wave | Freeze scope at wave start; defer extras |
| Undocumented architectural shifts | Maintain log + wave docs pre-implementation |
| AI cost spikes | Mock + usage guard rails before enabling keys |
| Fragmented onboarding state | Centralized UserSetupContext + idempotent backend APIs |
| Premature optimization churn | Perf tasks isolated to Wave 6 |

### Immediate Wave 0 Tasks
1. Create `REBUILD-WAVE-PLAN.md` (detailed acceptance criteria).  
2. Annotate `MIGRATION_STATUS.md` with rebuild notice.  
3. Commit documentation as atomic change.  
4. Begin Wave 1 branch & scaffold routing + guards.

### Exit Criteria (Wave 0)
- Documentation reflects present vs planned state unambiguously.  
- Missing components clearly marked as intentional rebuild items.  
- Wave sequencing & scope published for traceable future commits.

### Tracking
Progress logged in `pfmp-log.md`; tasks mirrored in internal TODO system.

---
