// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PFMP_API;

#nullable disable

namespace PFMP_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PFMP_API.Models.APICredential", b =>
                {
                    b.Property<int>("APICredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("APICredentialId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EncryptedApiKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptedApiSecret")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.HasKey("APICredentialId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("APICredentials");
                });

            modelBuilder.Entity("PFMP_API.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<string>("APIConnectionStatus")
                        .HasColumnType("text");

                    b.Property<string>("APIProvider")
                        .HasColumnType("text");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasAPIIntegration")
                        .HasColumnType("boolean");

                    b.Property<string>("Institution")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime?>("InterestRateUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAPIConnected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmergencyFund")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAPISync")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastBalanceUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal?>("OptimalInterestRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("RateLastChecked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TSPEmployerMatch")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TSPMonthlyContribution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PFMP_API.Models.Advice", b =>
                {
                    b.Property<int>("AdviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdviceId"));

                    b.Property<int>("ConfidenceScore")
                        .HasColumnType("integer");

                    b.Property<string>("ConsensusText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LinkedTaskId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DismissedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreviousStatus")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int?>("SourceAlertId")
                        .HasColumnType("integer");

                    b.Property<string>("GenerationMethod")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("SourceAlertSnapshot")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryJson")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Theme")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("ValidatorJson")
                        .HasColumnType("text");

                    b.Property<string>("ViolationsJson")
                        .HasColumnType("text");

                    b.HasKey("AdviceId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("Advice");
                });

            modelBuilder.Entity("PFMP_API.Models.Alert", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AlertId"));

                    b.Property<string>("ActionUrl")
                        .HasColumnType("text");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DismissedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PortfolioImpactScore")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActionable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");


                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AlertId");

                    b.HasIndex("CreatedAt");

                    // Removed legacy GeneratedTaskId index in refactor

                    b.HasIndex("UserId", "IsRead");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("PFMP_API.Models.Goal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GoalId"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("ExpectedAnnualReturn")
                        .HasColumnType("decimal(8,4)");

                    b.Property<decimal?>("MonthlyContribution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MonthlyExpenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MonthsOfExpenses")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<decimal?>("RequiredMonthlyContribution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RetirementAgeTarget")
                        .HasColumnType("integer");

                    b.Property<int>("RiskTolerance")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Strategy")
                        .HasColumnType("integer");

                    b.Property<decimal>("TargetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TargetMonthlyIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("WithdrawalRate")
                        .HasColumnType("decimal(8,4)");

                    b.HasKey("GoalId");

                    b.HasIndex("UserId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("PFMP_API.Models.GoalMilestone", b =>
                {
                    b.Property<int>("MilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MilestoneId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("GoalId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TargetAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MilestoneId");

                    b.HasIndex("GoalId");

                    b.ToTable("GoalMilestones");
                });

            modelBuilder.Entity("PFMP_API.Models.Holding", b =>
                {
                    b.Property<int>("HoldingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HoldingId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("AnnualDividendIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AnnualDividendYield")
                        .HasColumnType("decimal(8,4)");

                    b.Property<int>("AssetType")
                        .HasColumnType("integer");

                    b.Property<decimal>("AverageCostBasis")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("Beta")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("GeographicAllocation")
                        .HasColumnType("text");

                    b.Property<bool>("IsLongTermCapitalGains")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQualifiedDividend")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastDividendDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastPriceUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("NextDividendDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("SectorAllocation")
                        .HasColumnType("text");

                    b.Property<decimal?>("StakingAPY")
                        .HasColumnType("decimal(8,4)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("HoldingId");

                    b.HasIndex("AccountId", "Symbol");

                    b.ToTable("Holdings");
                });

            modelBuilder.Entity("PFMP_API.Models.IncomeSource", b =>
                {
                    b.Property<int>("IncomeSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IncomeSourceId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AnnualGrowthRate")
                        .HasColumnType("decimal(8,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DividendYield")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<string>("GS_PayScale")
                        .HasColumnType("text");

                    b.Property<string>("GovernmentAgency")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Is1099Income")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGuaranteed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTaxable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVACombined")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsW2Income")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("NextPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Reliability")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Symbol")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("VADisabilityPercentage")
                        .HasColumnType("integer");

                    b.HasKey("IncomeSourceId");

                    b.HasIndex("UserId");

                    b.ToTable("IncomeSources");
                });

            modelBuilder.Entity("PFMP_API.Models.Insurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InsuranceId"));

                    b.Property<string>("Beneficiaries")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("BenefitPeriodMonths")
                        .HasColumnType("integer");

                    b.Property<decimal?>("CashValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CashValueGrowthRate")
                        .HasColumnType("decimal(8,4)");

                    b.Property<decimal>("CoverageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Deductible")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("HSAContributionLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasHSA")
                        .HasColumnType("boolean");

                    b.Property<string>("InsuranceCompany")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("IsAdequateCoverage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTerm")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastPremiumPayment")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("MonthlyBenefit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("NeedsReview")
                        .HasColumnType("boolean");

                    b.Property<string>("NetworkType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("NextPremiumDue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal?>("OutOfPocketMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PolicyEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PolicyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("PolicyStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PremiumAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PremiumFrequency")
                        .HasColumnType("integer");

                    b.Property<string>("PropertyAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("PropertyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RecommendedCoverageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RenewalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ReplacementCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TermLengthYears")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("VIN")
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<string>("VehicleDescription")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("VehicleValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WaitingPeriodDays")
                        .HasColumnType("integer");

                    b.HasKey("InsuranceId");

                    b.HasIndex("UserId");

                    b.ToTable("InsurancePolicies");
                });

            modelBuilder.Entity("PFMP_API.Models.RealEstate", b =>
                {
                    b.Property<int>("RealEstateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RealEstateId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("AnnualInsurance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AnnualPropertyTaxes")
                        .HasColumnType("numeric");

                    b.Property<int?>("Bathrooms")
                        .HasColumnType("integer");

                    b.Property<int?>("Bedrooms")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentMarketValue")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("LastAppraisalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LeaseEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LeaseStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MonthlyExpenses")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MonthlyMortgagePayment")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MonthlyRentalIncome")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MortgageBalance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MortgageInterestRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("MortgageMaturityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PropertyType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SecurityDeposit")
                        .HasColumnType("numeric");

                    b.Property<int?>("SquareFootage")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("YearBuilt")
                        .HasColumnType("integer");

                    b.HasKey("RealEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("RealEstateProperties");
                });

            modelBuilder.Entity("PFMP_API.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CapitalGainLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CostBasis")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ExternalTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("HoldingId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDividendReinvestment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLongTermCapitalGains")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQualifiedDividend")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTaxable")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("SettlementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<decimal?>("StakingAPY")
                        .HasColumnType("decimal(8,4)");

                    b.Property<decimal?>("StakingReward")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("TaxableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("HoldingId");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("TransactionType");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("PFMP_API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("AccountLockedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("AnnualIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AzureObjectId")
                        .HasColumnType("text");

                    b.Property<bool>("BypassAuthentication")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("EmergencyFundTarget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EmploymentType")
                        .HasColumnType("text");

                    b.Property<bool>("EnableEmailAlerts")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnablePushNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableRebalancingAlerts")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableTaxOptimization")
                        .HasColumnType("boolean");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GovernmentAgency")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGovernmentEmployee")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTestAccount")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastRiskAssessment")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PayGrade")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("ProfileCompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ProfileSetupComplete")
                        .HasColumnType("boolean");

                    b.Property<decimal>("RebalancingThreshold")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RetirementGoalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RetirementSystem")
                        .HasColumnType("text");

                    b.Property<int>("RiskTolerance")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ServiceComputationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SetupProgressPercentage")
                        .HasColumnType("integer");

                    b.Property<string>("SetupStepsCompleted")
                        .HasColumnType("text");

                    b.Property<decimal?>("TargetMonthlyPassiveIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("TargetRetirementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("VADisabilityMonthlyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VADisabilityPercentage")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PFMP_API.Models.UserTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CompletionNotes")
                        .HasColumnType("text");

                    b.Property<decimal?>("ConfidenceScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DismissedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EstimatedImpact")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImpactDescription")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("integer");

                    b.Property<int?>("SourceAlertId")
                        .HasColumnType("integer");

                    b.Property<int?>("SourceAdviceId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TaskId");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("DueDate");

                    b.HasIndex("SourceAlertId");

                    b.HasIndex("UserId", "Status");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("PFMP_API.Models.APICredential", b =>
                {
                    b.HasOne("PFMP_API.Models.Account", "Account")
                        .WithOne("APICredentials")
                        .HasForeignKey("PFMP_API.Models.APICredential", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PFMP_API.Models.Account", b =>
                {
                    b.HasOne("PFMP_API.Models.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PFMP_API.Models.TSPAllocation", "TSPAllocation", b1 =>
                        {
                            b1.Property<int>("AccountId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("CFundPercentage")
                                .HasColumnType("decimal(5,2)")
                                .HasColumnName("TSP_CFundPercentage");

                            b1.Property<decimal>("FFundPercentage")
                                .HasColumnType("decimal(5,2)")
                                .HasColumnName("TSP_FFundPercentage");

                            b1.Property<decimal>("GFundPercentage")
                                .HasColumnType("decimal(5,2)")
                                .HasColumnName("TSP_GFundPercentage");

                            b1.Property<decimal>("IFundPercentage")
                                .HasColumnType("decimal(5,2)")
                                .HasColumnName("TSP_IFundPercentage");

                            b1.Property<decimal>("L2030FundPercentage")
                                .HasColumnType("decimal(5,2)");

                            b1.Property<decimal>("L2035FundPercentage")
                                .HasColumnType("decimal(5,2)");

                            b1.Property<decimal>("L2040FundPercentage")
                                .HasColumnType("decimal(5,2)");

                            b1.Property<decimal>("L2045FundPercentage")
                                .HasColumnType("decimal(5,2)");

                            b1.Property<decimal>("L2050FundPercentage")
                                .HasColumnType("decimal(5,2)");

                            b1.Property<decimal>("L2055FundPercentage")
                                .HasColumnType("decimal(5,2)");

                            b1.Property<decimal>("L2060FundPercentage")
                                .HasColumnType("decimal(5,2)");

                            b1.Property<decimal>("L2065FundPercentage")
                                .HasColumnType("decimal(5,2)");

                            b1.Property<decimal>("L2070FundPercentage")
                                .HasColumnType("decimal(5,2)");

                            b1.Property<decimal>("L2075FundPercentage")
                                .HasColumnType("decimal(5,2)");

                            b1.Property<decimal>("LIncomeFundPercentage")
                                .HasColumnType("decimal(5,2)");

                            b1.Property<DateTime>("LastUpdated")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("TSP_LastUpdated");

                            b1.Property<decimal>("SFundPercentage")
                                .HasColumnType("decimal(5,2)")
                                .HasColumnName("TSP_SFundPercentage");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("TSPAllocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PFMP_API.Models.Advice", b =>
                {
                    b.HasOne("PFMP_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PFMP_API.Models.Alert", b =>
                {
                    b.HasOne("PFMP_API.Models.User", "User")
                        .WithMany("Alerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    
                    b.Navigation("User");
                });

            modelBuilder.Entity("PFMP_API.Models.Goal", b =>
                {
                    b.HasOne("PFMP_API.Models.User", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PFMP_API.Models.GoalMilestone", b =>
                {
                    b.HasOne("PFMP_API.Models.Goal", "Goal")
                        .WithMany("Milestones")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("PFMP_API.Models.Holding", b =>
                {
                    b.HasOne("PFMP_API.Models.Account", "Account")
                        .WithMany("Holdings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PFMP_API.Models.IncomeSource", b =>
                {
                    b.HasOne("PFMP_API.Models.User", "User")
                        .WithMany("IncomeSources")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PFMP_API.Models.Insurance", b =>
                {
                    b.HasOne("PFMP_API.Models.User", "User")
                        .WithMany("InsurancePolicies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PFMP_API.Models.RealEstate", b =>
                {
                    b.HasOne("PFMP_API.Models.User", "User")
                        .WithMany("RealEstateProperties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PFMP_API.Models.Transaction", b =>
                {
                    b.HasOne("PFMP_API.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PFMP_API.Models.Holding", "Holding")
                        .WithMany("Transactions")
                        .HasForeignKey("HoldingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");

                    b.Navigation("Holding");
                });

            modelBuilder.Entity("PFMP_API.Models.UserTask", b =>
                {
                    b.HasOne("PFMP_API.Models.Alert", "SourceAlert")
                        .WithMany()
                        .HasForeignKey("SourceAlertId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PFMP_API.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceAlert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PFMP_API.Models.Account", b =>
                {
                    b.Navigation("APICredentials");

                    b.Navigation("Holdings");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PFMP_API.Models.Goal", b =>
                {
                    b.Navigation("Milestones");
                });

            modelBuilder.Entity("PFMP_API.Models.Holding", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PFMP_API.Models.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Alerts");

                    b.Navigation("Goals");

                    b.Navigation("IncomeSources");

                    b.Navigation("InsurancePolicies");

                    b.Navigation("RealEstateProperties");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
